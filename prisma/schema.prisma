// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  // createdDate DateTime @default(now())
  image     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[]@db.ObjectId
  emailVerified DateTime? // Optional field to track email verification


  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}
model Reservation {
      id        String   @id @default(auto()) @map("_id") @db.ObjectId
      userId    String   @db.ObjectId
      listingId String   @db.ObjectId
      startDate DateTime
      endDate DateTime
      totalPrice Float
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
      
      listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
      user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Listing {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String?
    description String
    image String
    price     Float
    createdAt DateTime @default(now())    
    updatedAt DateTime @updatedAt
    category String
    roomCount Int
    bathroomCount Int
    guestCount Int
    locationValue String
    userId    String   @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    reservations Reservation[]
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  provider  String   // e.g., 'google', 'facebook'
  providerAccountId String
  type                 String?  
  refreshToken String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  // idToken String?
  id_token String?
  sessionState String?

  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  @@unique([provider, providerAccountId])
}


